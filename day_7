# '''1+11+111+1111....+11111111111'''
#
# def demo(v, n):
#     assert type(n) == int and 0 < v < 10, 'v must be integer between 1 and 9'
#     result, t = 0, 0
#     for i in range(n):
#         t = t*10 + v
#         result += t
#     return result
#
#
# print(demo(1, 11))

# import requests
# from bs4 import BeautifulSoup
# url = "https://www.umei.cc/meinvtupian/meinvxiezhen/224389.htm"
# headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36"}
#
# response = requests.get(url=url, headers=headers)
# response.encoding = "utf-8"
# responses = response.text
# main_page = BeautifulSoup(responses, "html.parser")#解析器
# divs = main_page.find("div", attrs={"class": "ImageBody"})
# n = 1
# for a in divs:
#
#     img = divs.find("img").get("src")
#     f = open("tu_%s.jpg" % n, mode="wb")
#     f.write(requests.get(img).content)
#     print("已下载一张！！！")
#     n += 1
#     # text = divs.find("img").find_next("script").text
#     #
#     # print(text)
#     # num = text.split(",")[2].strip("\"")
#     # print(num)


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as mpl

import matplotlib.pyplot as plt


pd.options.display.max_columns = None
pd.options.display.max_rows = None
data = pd.read_csv("lianjia.csv")
# data.info()

df = data.copy()
df['PerPrice'] = data['Price']/data['Size']

# 重新摆放列位置

columns = ['Region', 'District', 'Garden', 'Layout', 'Floor', 'Year', 'Size', 'Elevator', 'Direction', 'Renovation', 'PerPrice', 'Price']
df = pd.DataFrame(df, columns=columns)

df = df[(df['Layout'] != '叠拼别墅') & (df['Size'] < 1000)]
# 对二手房区域分组对比二手房数量和每平米房价
plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']
df_house_count = df.groupby('Region')['Price'].count().sort_values(ascending=False).to_frame().reset_index()
df_house_mean = df.groupby('Region')['PerPrice'].mean().sort_values(ascending=False).to_frame().reset_index()

f, [ax1, ax2, ax3] = plt.subplots(3, 1, figsize=(10, 6))
sns.barplot(x='Region', y='PerPrice', palette="Blues_d", data=df_house_mean, ax=ax1)
ax1.set_title('北京各大区二手房每平米单价对比', fontsize=15)
ax1.set_xlabel('区域')
ax1.set_ylabel('每平米单价')

sns.barplot(x='Region', y='Price', palette="Greens_d", data=df_house_count, ax=ax2)
ax2.set_title('北京各大区二手房数量对比',fontsize=15)
ax2.set_xlabel('区域')
ax2.set_ylabel('数量')


sns.boxplot(x='Region', y='Price', data=df, ax=ax3)
ax3.set_title('北京各大区二手房房屋总价', fontsize=15)
ax3.set_xlabel('区域')
ax3.set_ylabel('房屋总价')
plt.tight_layout()

plt.show()

f, [ax1, ax2] = plt.subplots(1, 2, figsize=(10, 5))
# 建房时间的分布情况
sns.distplot(df['Size'], bins=20, ax=ax1, color='r')
sns.kdeplot(df['Size'], shade=True, ax=ax1)
# 建房时间和出售价格的关系
sns.regplot(x='Size', y='Price', data=df, ax=ax2)
plt.show()
#
#Layout特征分析

f, ax1 = plt.subplots(figsize=(10, 5))
sns.countplot(data=df, x='Layout',  ax=ax1)
ax1.set_title('房屋户型', fontsize=15)
plt.xticks(rotation=90)
ax1.set_xlabel('数量')
ax1.set_ylabel('户型')
plt.tight_layout()
plt.show()

# print(df['Renovation'].value_counts())

f, [ax1, ax2, ax3] = plt.subplots(1, 3, figsize=(10, 5))
sns.countplot(df['Renovation'], ax=ax1)
sns.barplot(x='Renovation', y='Price', data=df, ax=ax2)
sns.boxplot(x='Renovation', y='Price', data=df, ax=ax3)
plt.tight_layout()

plt.show()



misn = len(df.loc[(df['Elevator'].isnull()), 'Elevator'])
# print('Elevator缺失值数量为：' + str(misn))

df['Elevator'] = df.loc[(df['Elevator'] == '有电梯') | (df['Elevator'] == '无电梯'), 'Elevator']

# 填补Elevator缺失值
df.loc[(df['Floor'] > 6) & (df['Elevator'].isnull()), 'Elevator'] = '有电梯'
df.loc[(df['Floor'] <= 6) & (df['Elevator'].isnull()), 'Elevator'] = '无电梯'

f, [ax1, ax2] = plt.subplots(1, 2, figsize=(10, 5))
sns.countplot(df['Elevator'], ax=ax1)
ax1.set_title('有无电梯数量对比', fontsize=15)
ax1.set_xlabel('是否有电梯')
ax1.set_ylabel('数量')
sns.barplot(x='Elevator', y='Price', data=df, ax=ax2)
ax2.set_title('有无电梯房价对比', fontsize=15)
ax2.set_xlabel('是否有电梯')
ax2.set_ylabel('总价')
plt.show()



grid = sns.FacetGrid(df, row='Elevator', col='Renovation', palette='seismic',size=4)
grid.map(plt.scatter, 'Year', 'Price')
grid.add_legend()
plt.tight_layout()
plt.show()

f, ax1 = plt.subplots(figsize=(20, 5))
sns.countplot(x='Floor', data=df, ax=ax1)
ax1.set_title('房屋户型', fontsize=15)
ax1.set_xlabel('数量')
ax1.set_ylabel('户型')
plt.show()

#建模预测：
